<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
  <title>Profilist | Control Panel</title>
  <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
  <meta name="description" content="Control Panel for Profilist Firefox Add-on" />
  <link rel="shortcut icon" href="icon16.png" type="image/png" />

  <link rel="stylesheet" type="text/css" media="screen" href="options_resources/options.css" />
  <style>
	body {
	    font-size: 13px;
    width: 100%;
    height: 100%;
    background: none repeat scroll 0% 0% #FFF;
    min-width: 810px;
margin: 0px;
padding: 0px;
font: 74%/1.4em arial,helvetica,sans-serif;
color: #666;

}

h1 {
	vertical-align: middle;
background: none repeat scroll 0% 0% transparent;
text-indent: 0px;
color: #000;
padding: 0;
font-size: 1.9em;
font-weight: bold;
line-height: 1em;
width: 476px;
display: flex;
align-items: center;
margin: 0 0 7px 0;
}

h1 img {
vertical-align: middle;
margin-right: 10px;
flex-shrink: 0;
border: 0px none;
}

h1 small {
text-align: right;
flex-grow: 1;
}

.glb-bdy {
position: relative;
margin: 0px auto;
padding: 0px;
height: 100%;
display: flex;
flex-direction: column;
align-items: center;
justify-content: center;
}

#login-dialog {
	width: 486px;
	text-align: left;
margin: 0px;
padding: 0px;
}

.hd {
background: url('options_resources/eum_box_top.png') no-repeat scroll left top transparent;
height: 10px;
width: 486px;
margin: 0px;
padding: 0px;
}

#login-dialog-inner {
background: url('options_resources/eum_box_slice.png') repeat-y scroll left top transparent;
width: 486px;
float: left;
padding: 0px 5px;
position: relative;
margin: 0px;
}

.section {
width: 396px;
padding: 10px 40px;
margin: 0px;
}

h2 {
	padding-top: 8px;
font-size: 20px;
line-height: 130%;
color: #333;
font-weight: bold;
padding: 8px 0px 10px;
margin: 0px 0px 15px;
border-bottom: 1px solid #CCC;
}

form {
padding: 0px;
margin: 0px;
}

fieldset {
clear: both;
border: 0px none;
margin: 0px;
padding: 0px;
}

.row:after {
content: ".";
display: block;
height: 0px;
clear: both;
visibility: hidden;
}

.row {
position: relative;
margin: 0px;
padding: 0px 0px 10px;
clear: both;
}

.input-hint {
color: #666 !important;
margin: 3px 0px 0px 0px;
cursor: text;
padding-left: 0.2em;
width: 165px;
float: left;
vertical-align: middle;
}

input[type=text], select, textarea {
margin-left: 3px;
padding: 3px;
color: #333;
vertical-align: middle;
font: 99% verdana,geneva,sans-serif;
float: right;
border: 1px solid #abadb3;
}

.ft {
background: url('options_resources/eum_box_btm.png') no-repeat scroll left top transparent;
color: #FFF;
font-size: 0.93em;
float: left;
height: 10px;
padding-top: 130px;
width: 500px;
}

.inner-bg {
	width: 476px;
	background: linear-gradient(to bottom, #FFF 0%, #D9D9D9 200%) repeat-x scroll left top transparent;
	border-radius: 0 0px 5px 5px;
}
  </style>
  <script>
	const {interfaces: Ci, utils: Cu, classes: Cc} = Components;
	const myPrefBranch = 'extensions.Profilist@jetpack.';
	Cu.import('resource://gre/modules/Promise.jsm');
	Cu.import('resource://gre/modules/osfile.jsm');
	Cu.import('resource://gre/modules/devtools/Console.jsm');
	Cu.import('resource://gre/modules/AddonManager.jsm');
	Cu.import('resource://gre/modules/Services.jsm');
	Cu.import('resource://gre/modules/FileUtils.jsm');
	var XPIScope = Cu.import('resource://gre/modules/addons/XPIProvider.jsm');
	var scope = XPIScope.XPIProvider.bootstrapScopes['Profilist@jetpack'];
	console.log(scope.ini)
	
	document.addEventListener('DOMContentLoaded', init, false);
	window.addEventListener('unload', uninit, false);
	
	function updateDomFromIni(readIni) {
		
		var updateDOM = function() {
				//start - populate shortcut select
				var profileNames = [];
				var profileIdentifiers = [];
				for (var p in scope.ini) {
					if ('num' in scope.ini[p]) {
						profileNames.push([scope.ini[p].props.Name, scope.ini[p].props.Path]);
					}
				}
				
				profileNames.sort(function(a, b) {
					a = a[0];
					b = b[0];
					return a > b;
				});
				var shortcutSelect = document.querySelector('#profiles');
				var opts = shortcutSelect.querySelectorAll('option');
				for (var i=opts.length-1; i>0; i--) {
				  opts[i].parentNode.removeChild(opts[i])
				}
				for (var i=0; i<profileNames.length; i++) {
					var opt = document.createElement('option');
					opt.text = profileNames[i][0];
					opt.value = profileNames[i][1];
					shortcutSelect.appendChild(opt);
				}
				//end - populate shortcut select
				//start - make sure prefs on tree are what is pref values in ini
				var prefNames = scope.myPrefListener.watchBranches[myPrefBranch].prefNames;
				var writeIniForNewPrefs = false;
				for (var pref_name_in_obj in prefNames) {
					var prefObj = scope.myPrefListener.watchBranches[myPrefBranch].prefNames[pref_name_in_obj];
					var pref_name_in_ini = 'Profilist.' + pref_name_in_obj;
					if (pref_name_in_ini in scope.ini.General.props) {
						var value_in_ini = scope.ini.General.props[pref_name_in_ini];
						if (prefObj.type == Ci.nsIPrefBranch.PREF_BOOL) {
							//value_in_ini = value_in_ini == 'false' ? false : true;
							if (typeof(value_in_ini) != 'boolean') {
							  if (value_in_ini == 'false') {
								value_in_ini = false;
							  } else if (value_in_ini == 'true') {
								value_in_ini = true;
							  } else {
								throw new Error('not a boolean');
							  }
							}
						}
						if (prefObj.value != value_in_ini) {
							console.log('value of pref_name_in_ini in tree does not equal that of in ini so update tree to value of ini');
							console.log('value_in_ini:', value_in_ini);
							console.log('value_in_tree:', prefObj.value);
							prefObj.setval(value_in_ini, false);
							console.log('setval done');
						} else {
							console.log('ini and tree values match on pref_name:', pref_name_in_obj, prefObj.value, value_in_ini);
						}
					} else {
						scope.ini.General.props[pref_name_in_ini] = prefObj.value;
						writeIniForNewPrefs = true;
						console.log('pref_name_in_ini of ', pref_name_in_ini, ' is not in ini so using prefObj.value of ', prefObj.value, ' and set it in the ini obj but didnt write it', 'ini.General:', scope.ini.General);
					}
					var respectiveSelectBox = document.getElementById(pref_name_in_ini);
					if (respectiveSelectBox) {
						respectiveSelectBox.value = value_in_ini;
					} else {
						console.log('select box for', pref_name_in_ini, 'not found');
					}
				}
				if (writeIniForNewPrefs) {
					var promise89 = scope.writeIni();
					promise89.then(
						function() {
							console.log('succesfully wrote ini for storing new prefs');
						},
						function() {
							console.error('FAILED to write ini to store new prefs, no big though i think as it will just use the default values in ini obj in runtime');
						}
					);
				}
				//end - make sure prefs on tree are what is pref values in ini
		}
		
		if (readIni) {
			var promise = scope.readIni();
			return promise.then(
				function() {
					updateDOM();
				},
				function(aRejectReason) {
					console.error('Failed to refresh ini object from file during renameProfile');
				}
			);
		} else {
			updateDOM();
		}
	}
	
	function uninit() {
		console.log('uniniting');
		console.info('length of openCPContWins:', scope.openCPContWins.length);
		
		var indexIn = scope.openCPContWins.indexOf(Cu.getWeakReference(window));
		console.log('indexIn:', indexIn);
		
		for (var i=0; i<scope.openCPContWins.length; i++) {
			if (scope.openCPContWins[i].get() == window) {
				console.log('found me at pos:', i);
				scope.openCPContWins.splice(i, 1);
			}
		}

		if (scope.openCPContWins.length == 0) {
			scope.stopListenForAutoUpdateProp();
			console.log('stopped addon listener');
		}
		Services.obs.removeObserver(observer, 'profilist-update-cp-dom');
		console.log('uniniting done');
	}
	
	function init() {
				//get autoupdate
				AddonManager.getAddonByID('Profilist@jetpack', function(addon) {
					document.getElementById('Profilist.autoupdate').value = addon.applyBackgroundUpdates;
					//console.info('addon:', addon);
					//console.info('addon.applyBackgroundUpdates:', addon.applyBackgroundUpdates);
					//addon.applyBackgroundUpdates = 0; //off
					//addon.applyBackgroundUpdates = 1; //default
					//addon.applyBackgroundUpdates = 2; //on
				});
				
				scope.openCPContWins.push(Cu.getWeakReference(window));
				scope.startListenForAutoUpdateProp();
				
				Services.obs.addObserver(observer, 'profilist-update-cp-dom', false);
				
				updateDomFromIni(true);
	}
	
var observer = {
  observe: function(aSubject, aTopic, aData) {
	console.info('incoming observer on cp tab', 's', aSubject, 't', aTopic, 'd', aData);
    if (aTopic == 'profilist-update-cp-dom') {
		if (aData == 'updateDomFromIni.refresh') {
			console.log('incoming updateDomFromIni.refresh');
			updateDomFromIni(true);
		} else if (aData == 'updateDomFromIni.noref') {
			console.log('incoming updateDomFromIni.noref');
			updateDomFromIni(false);
		} else if (aData == 'restart') {
			console.log('incoming profilist.restart');
			scope.openCPContWins.push(Cu.getWeakReference(window));
			scope.startListenForAutoUpdateProp();
		} else if (aData == 'profilist.shutdown') {
			console.log('incoming profilist.shutdown');
			var newloc = 'data:text/html,<img src="https://addons.cdn.mozilla.net/user-media/addon_icons/500/500406-64.png?modified=1401373229"> Profilist add-on was either disabled or uninstalled while the control panel was open in this tab, so it has been unloaded.';
			var domWin = window.QueryInterface(Ci.nsIInterfaceRequestor)
								.getInterface(Ci.nsIWebNavigation)
								.QueryInterface(Ci.nsIDocShellTreeItem)
								.rootTreeItem
								.QueryInterface(Ci.nsIInterfaceRequestor)
								.getInterface(Ci.nsIDOMWindow);
			if (domWin.gBrowser) {
				if (domWin.gBrowser.tabContainer) {
					var tab = domWin.gBrowser._getTabForContentWindow(window);
					console.log('did gettab');
					tab.linkedBrowser.contentWindow.location = newloc;
				} else {
					gBrowser.contentWindow.location = newloc;
				}
			} else {
				domWin.location = newloc;
			}
		} else if (aData.indexOf(' || ') > -1) {
			var theSplit = aData.split(' || ');
			var pref_name = theSplit[0]; //aSubject;
			var pref_value = theSplit[1]; //aData;
			var control = document.getElementById('Profilist.' + pref_name);
			control.value = pref_value;
		}
    }
  }
};

	var changeTracker = {};
	function selectChange(e) {
		//start test if really changed
		var targ = e.target;
		if (targ.id in changeTracker) {
			//if (this.text == this.changeTracker.text
		}
		//end test if really changed
		console.log('targ', targ);
		console.log('selected changed, new profile name =', targ[targ.selectedIndex].text, targ[targ.selectedIndex].value);
		var profile_name = targ[targ.selectedIndex].text;
		var identifier = targ[targ.selectedIndex].value;
		createShortcut(identifier);
	}
	
	function createShortcut(identifier) {
		var loader = document.querySelector('#scLoader');
		loader.style.opacity = 1;
		
		var prof_props;
		for (var p in scope.ini) {
			if ('num' in scope.ini[p]) {
				//is profile
				if (scope.ini[p].props.Path == identifier) {
					prof_props = scope.ini[p].props;
					break;
				}
			}
		}
		if (!prof_props) {
			alert('ERROR - Could not find idnetifier of "' + identifier + '" in profiles list');
			loader.style.opacity = 0;
			return;
		}
		
		if (prof_props.IsRelative == '1') {
			var dirName = OS.Path.basename(OS.Path.normalize(prof_props.Path));
			var fullPathToProfile = OS.Path.join(FileUtils.getFile('DefProfRt', []).path, dirName);
		} else {
			var fullPathToProfile = prof_props.Path;
		}
		
		loader.style.display = 'flex-block';
		if (OS.Constants.Sys.Name == 'WINNT') {
			var exe = FileUtils.getFile('XREExeF', []);
			var myShortcut = FileUtils.getFile('Desk', ['Mozilla Firefox - ' + prof_props.Name + '.lnk']);
			var myShortcutWin = myShortcut.QueryInterface(Ci.nsILocalFileWin);

			//var myScIcon = new FileUtils.File('moz-icon:' + Services.io.newFileURI(exe).spec);
			//can use identifier as path because identifier is path. i thought but it didnt work out right so moving tgo full path to profile
			myShortcutWin.setShortcut(exe, null, '-profile "' + fullPathToProfile + '" -no-remote', 'Launches Mozilla Firefox with "' + prof_props.Name + '" Profile', exe);
		} else if (OS.Constants.Sys.Name == '') {
		
		} else {
			alert('Unrecognized Operating System - Desktop shortcut creation failed');
		}
		
		loader.style.opacity = 0;
	}
	
	function changeIcon(e) {
		var target = e.target;
		var oTarg = e.originalTarget;
		if (oTarg.classList.contains('browse-icon')) {
			//clicked browse icon
			alert('open browse');
			return;
		}
		if (oTarg.classList.contains('change-icon')) {
			target = target.parentNode;
		}
		if (target.classList.contains('release')) {
			target.classList.remove('release');
			target.classList.add('beta');
		} else if (target.classList.contains('beta')) {
			target.classList.remove('beta');
			target.classList.add('aurora');
		} else if (target.classList.contains('aurora')) {
			target.classList.remove('aurora');
			target.classList.add('nightly');
		} else if (target.classList.contains('nightly')) {
			target.classList.remove('nightly');
			target.classList.add('browse');
		} else if (target.classList.contains('browse')) {
			target.classList.remove('browse');
			target.classList.add('release');
		}
	}
	
	function browseEnter(e) {
		console.log('hide swithcer');
		e.target.parentNode.classList.add('noswitch');
		//var iconSwitcher = e.target.parentNode.querySelector('.change-icon');
		//iconSwitcher.style.opacity = '0';
	}
	
	function browseLeave(e) {
		console.log('make icon in app dir');
		e.target.parentNode.classList.remove('noswitch');
		//var iconSwitcher = e.target.parentNode.querySelector('.change-icon');
		//iconSwitcher.style.opacity = '';
	}
	
	 function updatePrefFromSelectChange(e) {
		var targ = e.target;
		var selectedText = targ[targ.selectedIndex].text;
		var selectedValue = targ[targ.selectedIndex].value;
		
		if (targ.id.substr(0, 10) != 'Profilist.') {
			console.warn('not set up to listen to non-Profilist. selects');
			return;
		}
		var pref_name = targ.id.substr(10);
		console.log('pref_name of select:', pref_name);
		console.log('newval:', selectedValue);
		
		if (pref_name == 'autoupdate') {
			AddonManager.getAddonByID('Profilist@jetpack', function(addon) {
				addon.applyBackgroundUpdates = selectedValue;
			//addon.applyBackgroundUpdates = 0; //off
			//addon.applyBackgroundUpdates = 1; //default
			//addon.applyBackgroundUpdates = 2; //on
			});
		} else {
			if (scope.myPrefListener.watchBranches[myPrefBranch].prefNames[pref_name]) {
				var branchObj = scope.myPrefListener.watchBranches[myPrefBranch];
				var prefObj = scope.myPrefListener.watchBranches[myPrefBranch].prefNames[pref_name];
				if (prefObj.type == Ci.nsIPrefBranch.PREF_BOOL) {
					//selectedValue = ['false', false, 0].indexOf(selectedValue) > -1 ? false : true;
					if (typeof(selectedValue) != 'boolean') {
					  if (selectedValue == 'false') {
						selectedValue = false;
					  } else if (selectedValue == 'true') {
						selectedValue = true;
					  } else {
						throw new Error('not a boolean');
					  }
					}
				}
				//console.log(scope.myPrefListener.watchBranches[myPrefBranch].prefNames[pref_name])
				//alert(branchObj._branchLive['set' + scope.typeStr_from_typeLong(prefObj.type) + 'Pref']);
				//alert(prefObj.setval);
				console.log('calling setFROMcp');
				prefObj.setval(selectedValue);
				console.log('setdoneFROMcp');
			} else {
				console.error('pref_name of', pref_name, 'not found in prefNames obj on branch:', scope.myPrefListener.watchBranches[myPrefBranch]);
			}
		}
	 }
  </script>
</head>

<body class="login">


        <div class="glb-bdy">
          <h1><img src="icon.png">Profilist<small>Control
          Panel</small></h1>

          <div id="login-dialog">
            <div class="hd"></div>

            <div class="bd" id="login-dialog-inner">
			<div class="inner-bg">
              <div class="section log-in">
                <h2>General</h2>
                <form name="login" action="/eum/login" method="post">
                  <fieldset>
                    <div class="row">
                      <label class="input-hint">Automatic Updates</label>
					  <select style="width:8em" id="Profilist.autoupdate" onchange="updatePrefFromSelectChange(event)">
                        <option value="1">
                          Default
                        </option>
                        <option value="2">
                          On
                        </option>
                        <option value="0">
                          Off
                        </option>
                      </select>
                    </div><!--next row-->

                    <div class="row">
                      <label class="input-hint">Notifications</label>
					  <select style="width:8em" id="Profilist.notifications" onchange="updatePrefFromSelectChange(event)">
                        <option value="true">
                          Enabled
                        </option>
                        <option value="false">
                          Disabled
                        </option>
                      </select>
                    </div><!--next row-->

                    <div class="row">
                      <label class="input-hint">Developer Options</label>
					  <select style="width:8em" id="Profilist.dev" onchange="updatePrefFromSelectChange(event)">
                        <option value="true">
                          Enabled
                        </option>
                        <option value="false">
                          Disabled
                        </option>
                      </select>
                    </div><!--next row-->

                    <div style="" class="row">
                      <label style="" class="input-hint">Create Desktop Shortcut</label>
                      <select id="profiles" onchange="selectChange(event)" style="width:14em; text-overflow:ellipsis;">
                        <option value="null">
                          Select Profile Name
                        </option>
                      </select>
					  <label id="scLoader" style="float: right; position: relative; width: auto; margin: 6px 3px 3px; pointer-events:none; opacity:0; transition:opacity 200ms;" class="input-hint">
						<img src="options_resources/loading.gif" />
					  </label>
                    </div><!--next row-->
                  </fieldset>
                </form>
              </div>
			  <!--next section-->
              <div class="section log-in" style="padding-top:0;">
                <h2>Developer</h2>
                <form name="login" action="/eum/login" method="post">
                  <fieldset>
                    <div class="row" style="padding-bottom:3px;">
                      <label class="input-hint">Firefox Builds</label> <select style=
                      "pointer-events: none; visibility: hidden;" disabled="disabled">
                        <option>
                          dummy for height of row
                        </option>
                      </select>
                    </div><!--next row-->

                    <div class="builds-cont">
                      <div>
                        <span>
							Icon
						</span>
                        <span>
							Path to Executable
						</span>
                        <span>
							<span class="icon tools"></span>
						</span>
                      </div>
                      <div class="attn">
                        <span onclick="changeIcon(event)" class="release">
							<!--<img src="bullet_release.png">--><span class="icon change-icon"></span><span class="icon browse-icon"onmouseenter="browseEnter(event)" onmouseleave="browseLeave(event)"></span>
						</span>
                        <span>
							<input type="text"><span class="icon"></span>
						</span>
                        <span>
							<span class="icon cancel"></span>
							<span class="icon updown"></span>
							<span class="icon current-build"></span>
						</span>
                      </div>
                    </div>
                  </fieldset>
                </form>
              </div>
			  <!--next section-->
			</div>
            </div>

            <div class="ft"></div>
          </div>
        </div>

</body>
</html>
